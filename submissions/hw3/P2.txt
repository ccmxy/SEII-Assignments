1) What is the bug? Concisely describe it and provide a test case that reproduces it.
 Include a JUnit case in your writeup that replicates the error.
 Be clear as to what the expected and actual outputs look like


Now that I look back at CardCollection.java, it seems like something that I should have seen.
I knew that the equals operator in the Card class had been overriden to find any two cards with
the same face and suit to be equal. I could also see that the discardCard function in the CardCollection
class worked by making a copy of the card and using that copy as the parameters of the remove operation.
But I couldn't put 2 and 2 together to realize that this would cause the first "matching" card in the
set to be removed.

Here is the test in my suite that shows the bug:

      /*Test that discardCard function returns the correct card*/
      @Test
      public void discardCardNotRemovingCopyOfCardTest() {

       CardCollection testCollection = new CardCollection(new Card(Card.Face.THREE, Card.Suit.CLUB),
        new Card(Card.Face.FIVE, Card.Suit.DIAMOND), new Card(Card.Face.THREE, Card.Suit.CLUB));
        //Now the deck looks like, {3 of Clubs, 5 of Diamonds, 3 of Clubs}

        //Removing the last 3 of Clubs (card 3), leaving first 3 of Clubs at position 0
        testCollection.discardCard(2);

        List < Card > testCollectionCardsList = testCollection.getCards();

        //The first 3 of clubs (card 1) should still be at position 0.
       assertEquals(testCollectionCardsList.get(0), new Card(Card.Face.THREE, Card.Suit.CLUB));
       //Assertion fails! The card at position 0 is the 5 of diamonds, because
       //the FIRST 3 of clubs was removed! Bug discovered!!

      }


2) Would this error surface when the class was used for the following:
...a deck where cards are always drawn from the top?
...a hand where the player is required to keep their cards in order?
...a deck that is shuffled by removing cards from a random place in the
deck and adding them back via method add?

In a case where cards are always drawn from the top... assuming that "the top" is
cards that have a higher index in the array, if there are multiple copies of
identical cards, yes that would cause issues. But if the top starts at 0 then I
don't think so.

In a hand where the player is required to keep their cards in order... I don't know
if this involves seperating them by suit. If yes, then this would not cause any
issues because cards of the same face and suit would always be next to each other,
so a removal of one or the other would be functionally identical. But if no, as in
hands would be like {2 of hearts, 2 of spades, 2 of hearts} than yes the bug would affect
that.

In the case that a deck is shuffled by removing cards at random and adding them back
via add... that would effect the shuffle. Cards that you try to grab from random
positions would just grab the first instance of that card it could find and then
put that on top. I think it's mathematically complicated to say exactly how the shuffle would
be effected though.
