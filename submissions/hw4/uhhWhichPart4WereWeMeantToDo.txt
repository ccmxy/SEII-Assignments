Don't look at this one please, I'm pretty sure you're meant to
grade my other one. There
has been confusion about the difference between these two readmes:
https://github.com/OSU-CS362-F16/362Exercises/tree/inprogress/templates/hw4

vs

https://github.com/OSU-CS362-F16/assignments-ccmxy/tree/hw4/templates/hw4

1) True or False: A good test suite has good coverage
  True.

2) True or False: A suite with good coverage implies a good test suite
  False.

  3) True or False: 100% Line/Statement Coverage implies 100% Branch Coverage

  False. I'll demonstrate with an example:

     if (variable == NULL)
              variable = 0

  If you only tested this when variable == NULL, you would cover
  100% of these two lines, but you would never test for the condition
  of the if statement being false.

4) True or False: 100% Branch Coverage implies 100% Line/Statement Coverage

   True. A statement is covered if it is executed. For 100% branch
   coverage, each possible branch from each decision point is executed.
   Logically, if every possible jump from one line of code to another
   happens during testing (100% branch coverage), then every statement
   must be executed.

5) Is it possible to write a function and test suite with "% lines covered" less than "% branches covered"? If yes, give an example in pseudo-code

  Yes. Example:

  if x is true:
    y = 1
  else:
   a = 2
   b = 3
   c = 4
   d = 5

  Let's say we test this with the condition that x is true. This will give
  us 50% branch coverage (of the 2 branches x is true and x is false),
  but we are only executing 3/7 statements, giving us 43% statement coverage.

6) Describe in a paragraph or less how your intuitions for what consitutes a quality test suite aligned (or did not) with your initial coverage results in problem 3

My tests got good line-coverage percentages initially, though I didn't realize it for a long
time because I had forgotten to comment out the code in SimpleBlackJack.java.
When I ran cobertura, one thing that I realized was that I had forgotten to
cover a lot of branches relating to the compareHandAndSettle() dealer class
function that I was able to do. Another thing that makes this hard to say though
is that I was not allowed to fix the bugs, so I couldn't really approach this with
my normal way of thinking. I approached this with the idea that I wanted to
get a certain amount of coverage, even though a lot of that would be
restricted by some errors that are pretty cohesive with a lot of parts
of the program.


7) Compare in a paragraph or less a test suite written only using input domain partitioning to a test suite written to optimize coverage metrics.

Each has their benefits and drawbacks. The advantage having disjoint tests is that
it reduces the total number of test that need to be done. As noted in the lectures,
the range of possible input values is huge, so by coming up with categories
to test we can uncover errors. However, this relies on the inputs used really being
generalizable to all other inputs in that partition. That isn't always the case,
which is how bugs can hide. A coverage-focused suite doesn't have to rely on the
developer's judgement about how much code is covered. However, sometimes 100%
path coverage is impossible, and the testing suite might be a lot longer than
a partition-based one.
