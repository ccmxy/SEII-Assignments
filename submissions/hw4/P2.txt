1) Explore your Cobertura site and find a branch (for/if)
 that has been 'covered' (a hit count of greater than zero
 on the left column near the line number) but is highlighted red.
 What does this indicate?

 The one that I'm looking at now is:

1 if(dealerScore<handScore(p.getHand())){ <---highlighted red
1	         p.acceptMoney(currentBet*2);
  }

 From what I understand, this means that, although at some
 point that statement was executed, it was not met and then
 found to have both possible outcomes (like both true and false).
 I can see just below this function that there is an "else" statement
 which was executed 0 times. The red indicates that I have only
 tried the "true" branch of this statement.

 2) Why are Java interfaces always marked with N/A for coverage?

Java interfaces have no code to cover; they can only contain
method signatures and fields.

3) From a testing and debugging perspective,
what is the disadvantage of a functional test like
testBasicFunctionality?

testBasicFunctionality doesn't separate out its tests on different
functions and conditions. Because of that, if there is
a failure, it will take some time to figure out what the issue is.
Whereas with unit testing, the tests are separated so that
if there is a failure, you quickly know what function and
condition caused the problem.

4) Describe the relationship, if any, between the number of
 if/else if/else statements in a piece of code and the number of
 branches to be covered.
